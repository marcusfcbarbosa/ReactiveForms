Devido ao curso
ng --version
Obs: Versao atual do node 12
versao atual do angular cli 8.3.8



1- Criando um componente que sera um formulario de cadastro
ng g c demos/reactiveForms/cadastro
---------------------------------------------------------------------------------------------------------
2-Adicione o Module ReactiveForms no app.module (ou no modulo principal)
 import { FormsModule,ReactiveFormsModule }   from '@angular/forms';

  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule, <==========Esse aqui
    [RouterModule.forRoot(rootRouterConfig, { useHash: false})]
  ],
  ---------------------------------------------------------------------------------------------------------
  3- Criar um link no menu de component
  menu.component.html
<li class="nav-item">
            <a class="nav-link"  [routerLink]="['/cadastro']">Cadastro</a>
</li>
e no app.router inserir uma nova rota

    { path: 'cadastro', component: CadastroComponent }
  ---------------------------------------------------------------------------------------------------------
  4- Colando um template de HTML pronto do formulario<div class="container main-container">
    <h4>Demo Cadastro</h4>
    <hr />
    <form novalidate (ngSubmit)="adicionarUsuario()" [formGroup]="cadastroForm">
        <div class="form-horizontal">

            <div class="form-group">
                <label class="col-md-2 control-label" for="nome">Nome Completo</label>
                <div class="col-md-10">
                    <input class="form-control" id="nome" type="text" placeholder="Nome (requerido)" formControlName="nome" [ngClass]="{'is-invalid': displayMessage.nome }" />
                    <span class="text-danger" *ngIf="displayMessage.nome">
                        <p [innerHTML]="displayMessage.nome"></p>
                    </span>
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2 control-label">CPF</label>
                <div class="col-md-10">
                    <input class="form-control" id="cpf" type="text" placeholder="CPF (requerido)" formControlName="cpf" cpf [textMask]="{mask: MASKS.cpf.textMask}" [ngClass]="{'is-invalid': displayMessage.cpf }" />

                    <span class="text-danger" *ngIf="displayMessage.cpf">
                        <p [innerHTML]="displayMessage.cpf"></p>
                    </span>
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2 control-label">E-mail</label>
                <div class="col-md-10">
                    <input class="form-control" id="email" type="text" placeholder="E-mail (requerido)" formControlName="email" [ngClass]="{'is-invalid': displayMessage.email }" />
                    <span class="text-danger" *ngIf="displayMessage.email">
                        <p [innerHTML]="displayMessage.email"></p>
                    </span>
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2 control-label">Senha</label>
                <div class="col-md-10">
                    <input class="form-control" id="senha" type="password" placeholder="Senha (requerido)" formControlName="senha" [ngClass]="{'is-invalid': displayMessage.senha }" />
                    <span class="text-danger" *ngIf="displayMessage.senha">
                        <p [innerHTML]="displayMessage.senha"></p>
                    </span>
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2 control-label">Confirme a Senha</label>
                <div class="col-md-10">
                    <input class="form-control" id="senhaConfirmacao" type="password" placeholder="Confirme a Senha (requerido)" formControlName="senhaConfirmacao" [ngClass]="{'is-invalid': displayMessage.senhaConfirmacao }" />
                    <span class="text-danger" *ngIf="displayMessage.senhaConfirmacao">
                        <p [innerHTML]="displayMessage.senhaConfirmacao"></p>
                    </span>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-4 col-md-offset-2">
                    <span><button class="btn btn-success" id="Registrar" [disabled]="!cadastroForm.valid" type="submit">Registrar</button></span>
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-4 col-md-offset-2">
                    <p>Formulario valido: {{ cadastroForm.valid }}</p>
                    <p>Formulario Tocado: {{ cadastroForm.touched }}</p>
                    <p>Formulario Sujo: {{ cadastroForm.dirty }}</p><br>
                    <p>Formulario: {{ formResult }}</p>
                </div>
            </div>
        </div>
    </form>
</div>
--------------------------------------------------------------------------------------------------
5- Vinculando os FormControl com o HTML
formControlName="nome"

dentro da tag html de cada input deve ser vinculado essa tag(formControlName="nomeDoRespectivoCampo")

pois no .ts do componente esta assim

 ngOnInit() 
  {
    let nome = new FormControl('');
  }

  Mas para submter varios campos todos juntos, deve-se utlizar FormGroup no seu .ts e vincular dentro
  da tag form o FormGroup 

  ou seja no .ts, fica dessa forma:

  import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-cadastro',
  templateUrl: './cadastro.component.html'
})
export class CadastroComponent implements OnInit {

  cadastroForm: FormGroup; <=====================
  constructor() { 
  }
  ngOnInit() 
  {
    this.cadastroForm = new FormGroup({
      nome: new FormControl('') <=========================
    });
    
  }
}
 e no HTML fica assim 
 <form novalidate [formGroup]="cadastroForm" >

--------------------------------------------------------------------------------------------------
6- Para submeter um formulario pelo angular necessita , de um evento (ngSubmit) no template HTML
No Momento do submit voce consegue visualizar todos os dados do formulario 
 adicionarUsuario() {

    let x = this.cadastroForm.value;  <============ todos os dados do formulario estao aqui 
    console.log(x);
  }
--------------------------------------------------------------------------------------------------
7-Agora trablhando com FormBuilder, ao invés de usar dessa Forma aqui 

  ngOnInit() {
    this.cadastroForm = new FormGroup({
      nome: new FormControl(''),
      cpf: new FormControl(''),
      email: new FormControl(''),
      senha: new FormControl(''),
      senhaConfirmacao: new FormControl(''),
    });

Se injeta o FormBuilder no constructor dessa forma:
constructor(private fb: FormBuilder) {
  }

 ngOnInit() {
    this.cadastroForm = this.fb.group({
      nome: [''],
      cpf: [''],    <====== dai ele espera um array, dessa forma tambem pode incluir criterios de validação
      email: [''],
      senha: [''],
      senhaConfirmacao: ['']
    });
  } 
--------------------------------------------------------------------------------------------------
8- Criando um objeto da aplicação que ira representar os dados enviados do formulario

export interface Usuario {   <========= pode ser interface ou class se for class consegue habilitar algum tipo de comportamento, método etc
    id: string;
    nome: string;
    CPF: string;
    email: string;
    senha: string;
    senhaConfirmacao: string;
}
Inclui o objet no component.ts dessa forma 


  usuario: Usuario;

 e ao receber os dados do formulario e serializar no formato da interafce desejada faz isso
  adicionarUsuario() {
    this.usuario = Object.assign({},this.usuario,this.cadastroForm.value); <=======
    console.log(this.usuario);
  }
--------------------------------------------------------------------------------------------------
9- Validação Básica de Formulario ReactiveForms

Dentro do Component.ts 

this.cadastroForm = this.fb.group({
      nome: ['',Validators.required],
      cpf: ['',Validators.required],
      email: ['',Validators.required],
      senha: ['',Validators.required],
      senhaConfirmacao: ['',Validators.required]
    });
no template HTML tambem é possivel visualizar se o formulario esta com os dados validos 
<div class="form-group">
    <div class="col-md-4 col-md-offset-2">
        <p>Formulario valido: {{ cadastroForm.valid }}</p> <============= Dessa forma
    </div>
</div>

 e no template HTML dentro do proprio campo que vc deseja validar voce pode trabalhar da seguinte forma:
DESSA FORMA FICA SEMPRE EXIBIND A MENSAGEM
<div class="form-group">
    <label class="col-md-2 control-label" for="nome">Nome Completo</label>
    <div class="col-md-10">
        <input class="form-control" id="nome" type="text" placeholder="Nome (requerido)"
            formControlName="nome" />
        <span class="text-danger" *ngIf="cadastroForm.get('nome').errors">   <==== a diretive *ngIf verifica se o campo dentro do Form cadastroForm do campo nome possui algum erro
            <p>Preencha o Campo Nome </p>
        </span>
    </div>
</div>

EXISTEM VARIAS FORMAS UMA DELAS, É essa
<span class="text-danger" 
        <span class="text-danger" *ngIf="cadastroForm.get('nome').errors && (cadastroForm.get('nome').dirty || cadastroForm.get('nome').touched)"    <==============PRECISA HABILITAR ALGUMA LOGICA PARA APARECER (DESSA FORMA FUNCIONOU MELHOR)
        [hidden]="!cadastroForm.get('nome').touched || cadastroForm.get('nome').dirty"><==============PRECISA HABILITAR ALGUMA LOGICA PARA APARECER
        <p>Preencha o Campo Nome </p>
    </span>
</div>


OBS: por padrão o formulario ja sobe com erro 
cadastroForm.get('nome').errors <============= isso vai ser sempre true 

Podemos também embutir uma classe CSS no campo do formulario especifico com algum forma de validaçao,usando a diretvia [ngClass]

<div class="form-group">
    <label class="col-md-2 control-label" for="nome">Nome Completo</label>
    <div class="col-md-10">
        <input class="form-control" id="nome" 
        type="text" 
        placeholder="Nome (requerido)"

        [ngClass]="{'is-invalid': cadastroForm.get('nome').errors && (cadastroForm.get('nome').dirty || cadastroForm.get('nome').touched)}"    <=======ESSA AQUi
        
        formControlName="nome" />
        <span class="text-danger" 
        *ngIf="cadastroForm.get('nome').errors && (cadastroForm.get('nome').dirty || cadastroForm.get('nome').touched)">
            <p>Preencha o Campo Nome </p>
        </span>
    </div>
</div>

OBS: LEMBRANDO QUE A VALIDACAO ACIMA É POR CADA CAMPO
--------------------------------------------------------------------------------------------------
10- Fazendo uma validaçao pelo Bakend para bloquear os submits 

 <div class="form-group">
    <div class="col-md-4 col-md-offset-2">
        <span><button class="btn btn-success" 
            id="Registrar" 
            [disabled]="!cadastroForm.valid" <============ Dessa forma pelo HTML
            type="submit">Registrar</button></span>
    </div>
</div>


DESSA FORMA VALIDA PELO .TS BACKEND
 
 adicionarUsuario() {
    if(this.cadastroForm.dirty &&this.cadastroForm.valid ){ <====== verifica se o formulario esta sujo e se esta valido
      this.usuario = Object.assign({},this.usuario,this.cadastroForm.value);
      this.formResult = JSON.stringify(this.cadastroForm.value);
    }else{
      this.formResult ='Cadastro Invalido'
    }
 }
----------------------------------------------------------------------------------------------
11- Habiliando uma validação e validações especificas para cada erro 
é feito isso (adastroForm.get('email')?.errors?.email ) com uso do "?", pois aponta erros com nullable, entao se habilita esse modo unsafe
isso para ERROS ESPECIFICOS 

<div class="form-group">
<label class="col-md-2 control-label">E-mail</label>
<div class="col-md-10">
    <input class="form-control" id="email"
        type="text" 
        placeholder="E-mail (requerido)"
        [ngClass]="{'is-invalid': cadastroForm.get('email').errors && (cadastroForm.get('email').dirty || cadastroForm.get('email').touched)}"
        formControlName="email" />
    <span class="text-danger"
        *ngIf="cadastroForm.get('email')?.errors?.required && (cadastroForm.get('email').dirty || cadastroForm.get('email').touched)">
        <p>Preencha o Campo Email </p>
    </span>
    <span class="text-danger"
        *ngIf="cadastroForm.get('email')?.errors?.email && (cadastroForm.get('email').dirty || cadastroForm.get('email').touched)">
        <p>E-mail em formato invalido </p>
    </span>
</div>
</div>
----------------------------------------------------------------------------------------------
12 - Tentando instalar uma dependencia que deu muito problema, validação de CPF, pelo

npm i ng-brazil@2.0.9 <==== tem que ser nessa versao 

npm i ng2-validation <================== a versao esta na 4.2.0 só importei esse



ngOnInit() {
    this.cadastroForm = this.fb.group({
      nome: ['', Validators.required],
      cpf: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      senha: ['', [Validators.required, CustomValidators.rangeLength([6,15])]], <=== Validacao Customizada de senha 
      senhaConfirmacao: ['', Validators.required]
    });
  }

<div class="form-group">
    <label class="col-md-2 control-label">Senha</label>
    <div class="col-md-10">
        <input class="form-control" id="senha" type="password" placeholder="Senha (requerido)"
            formControlName="senha" />
        <span class="text-danger"
            *ngIf="cadastroForm.get('senha')?.errors?.rangeLength && (cadastroForm.get('senha').dirty || cadastroForm.get('senha').touched)">   <==== Essa validação funcionou
            <p>Tamanho Invalido</p>
        </span>
    </div>
</div>
----------------------------------------------------------------------------------------------
13 - Fazendo comparacao de Senha e senhaConfirmacao pelo BACKEND
 ngOnInit() {
    let senha = new FormControl('', [Validators.required, CustomValidators.rangeLength([6, 15])]);
    let senhaConfirmacao = new FormControl('', [Validators.required, CustomValidators.rangeLength([6, 15]), CustomValidators.equalTo(senha)]);


    this.cadastroForm = this.fb.group({
      nome: ['', Validators.required,Validators.minLength(2),Validators.maxLength(150)],
      cpf: ['', Validators.required,Validators.minLength(11),Validators.maxLength(11)],
      email: ['', [Validators.required, Validators.email]],
      senha: senha,
      senhaConfirmacao: senhaConfirmacao
    });
  }

  mas nao esta habilitando botao ainda, formulario ainda esta invalido

----------------------------------------------------------------------------------------------
13- Usando Observable para  ficar monitorando os campos do formulario.
No momento que tirar o foco do campo que ele vai informar se o campo esta errado ou não.

Nem sei o que falar Rever 

"Validações avançadas de formulario"
----------------------------------------------------------------------------------------------
14- Separando a aplicaçao em módulos, para que nao fique tudo somente registrado no app.module 
que é o módulo principal

  1-começando implementar módulo de navegação 
  2- criei dentro do contexto de Navegacao o NavegacaoModule que é um módulos secundário  


